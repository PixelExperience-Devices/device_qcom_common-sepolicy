# Copyright (c) 2022 Qualcomm Innovation Center, Inc. All rights reserved.
# SPDX-License-Identifier: BSD-3-Clause-Clear

type vendor_qccvendor, domain;

type vendor_qccvendor_exec, file_type, vendor_file_type, exec_type;

init_daemon_domain(vendor_qccvendor)

allow vendor_qccvendor vendor_qccvendor_data_file:file create_file_perms;
allow vendor_qccvendor vendor_qccvendor_data_file:dir create_dir_perms;

# allow qcc_prop
set_prop(vendor_qccvendor, vendor_qcc_prop);

# allow persist_vendor_qtr_prop
set_prop(vendor_qccvendor, vendor_qtr_prop);

# read ver_info.txt
allow vendor_qccvendor vendor_firmware_file:dir r_dir_perms;
allow vendor_qccvendor vendor_firmware_file:file r_file_perms;

# store data in sdcard
userdebug_or_eng(`
allow vendor_qccvendor fuse_device:chr_file rw_file_perms;
allow vendor_qccvendor fuse:dir create_dir_perms;
allow vendor_qccvendor fuse:file create_file_perms;
allow vendor_qccvendor mnt_user_file:dir search;
allow vendor_qccvendor mnt_user_file:lnk_file read;
')

allow vendor_qccvendor self:{ qipcrtr_socket } create_socket_perms_no_ioctl;

# qcc-vendor.alog
unix_socket_connect(vendor_qccvendor, logdr, logd);
allow vendor_qccvendor vendor_qcc_trd_data_file:file create_file_perms;
allow vendor_qccvendor vendor_qcc_trd_data_file:dir create_dir_perms;

# allow qcc-vendor to add and find vendor service
add_service(vendor_qccvendor, vendor_qtrsdkservice_service)
vndbinder_use(vendor_qccvendor)

# allow qcc-vendor to add qccvndhal service to hwservicemanager
hal_server_domain(vendor_qccvendor, vendor_hal_qccvndhal)
hal_attribute_hwservice(vendor_hal_qccvndhal, vendor_hal_qccvndhal_hwservice)

#Allow hwbinder call from hal client to server
binder_call(vendor_hal_qccvndhal_client, vendor_hal_qccvndhal_server)
binder_call(vendor_hal_qccvndhal_server, vendor_hal_qccvndhal_client)

#allow access to qccsyshal
hal_client_domain(vendor_qccvendor, vendor_qccsyshal);

# tombstone
crash_dump_fallback(vendor_qccvendor)

hal_attribute_service(vendor_hal_qccvndhal, vendor_hal_qccvndhal_service)

#to avoid an avc denial
#avc: denied { call } for scontext=u:r:vendor_qccvendor:s0 tcontext=u:r:servicemanager:s0 tclass=binder permissive=0
binder_call(vendor_qccvendor, servicemanager)